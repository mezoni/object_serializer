import 'dart:io';

import 'package:object_serializer/simple_json_serializer_generator.dart';
import 'package:yaml/yaml.dart';

void main() {
  final classes = loadYaml(_classes) as Map;
  final g = SimpleJsonSerializerGenerator();
  final classesCode = g.generateClasses(classes);
  final enums = loadYaml(_enums) as Map;
  final enumCode = g.generateEnums(enums);
  final collectionCode = g.generateSerializerCollection(
    '_collection',
    [
      ...classes.keys.cast(),
      ...enums.keys.map((e) => '$e'),
    ],
    [
      'BigIntSerializer',
      'DateTimeSerializer',
      'DurationSerializer',
      'UriSerializer',
    ],
  );
  final enumSerializersCode = g.generateSerializersForEnums(enums);
  final classSerializersCode = g.generateSerializersForClasses(classes);
  final values = {
    'classes': classesCode,
    'classSerializers': classSerializersCode,
    'enumSerializers': enumSerializersCode,
    'collection': collectionCode,
    'enums': enumCode,
  };

  var source = _render(_template, values);
  source = g.format(source);
  File('example/example.dart').writeAsStringSync(source);
}

const _classes = '''
Company:
  name: String
  website: Uri

Customer:
  age: int?
  birthday: DateTime?
  frequency: Duration
  level: CustomerLevel
  name: String

Order:
  amount: BigInt
  company: Company
  customer: Customer
  date: DateTime
  lines: List<OrderLine>

OrderLine:
  product: Product
  price: BigInt
  quantity: int
  total: BigInt

Product:
  name: String
  price: BigInt
  priceRange: Map<String, double>
''';

const _enums = '''
CustomerLevel: [retail, wholesale]
''';

const _template = r'''
// GENERATED BY TOOL
// https://pub.dev/packages/object_serializer
// SimpleJsonSerializerGenerator
// This code is an example, it was generated by another example code

import 'dart:convert';

import 'package:object_serializer/json_serializer.dart';

void main(List<String> args) {
  final price = BigInt.from(29.99);
  final order = Order(
    amount: price,
    company: _company,
    customer: _customer,
    date: DateTime.now(),
    lines: [
      OrderLine(
          product: _product,
          price: price,
          quantity: 25,
          total: price * BigInt.from(25))
    ],
  );

  final orders = [order, order];
  final jsonObject = serializeList(orders, _collection);
  final jsonString = jsonEncode(jsonObject);
  final jsonObject2 = jsonDecode(jsonString);
  final orders2 = deserializeList<Order>(jsonObject2, _collection);
  final jsonObject3 = serializeList(orders2, _collection);
  final jsonString2 = jsonEncode(jsonObject3);
  final result = jsonString == jsonString2;
  print(jsonString2);
  print('Test passed: $result');
}

{{collection}}

final _company = Company(
  name: 'ACME Inc.',
  website: Uri.parse('https://acme.com'),
);

final _customer = Customer(
  age: null,
  birthday: null,
  frequency: Duration(days: 10),
  level: CustomerLevel.wholesale,
  name: 'Peter Pan',
);

final _product = Product(
  name: 'The Little White Bird',
  price: BigInt.from(49.99),
  priceRange: {
    '3': 49.99,
    '10': 39.99,
    '25': 29.99,
  },
);

{{classes}}

{{enums}}

{{classSerializers}}

{{enumSerializers}}

class BigIntSerializer extends JsonSerializer<BigInt> {
  @override
  BigInt deserialize(Deserializer deserializer, Object? value) {
    final json = cast<String>(value);
    return BigInt.parse(json);
  }

  @override
  String serialize(Serializer serializer, BigInt value) {
    return value.toString();
  }
}

class DateTimeSerializer extends JsonSerializer<DateTime> {
  @override
  DateTime deserialize(Deserializer deserializer, Object? value) {
    final json = cast<String>(value);
    return DateTime.fromMicrosecondsSinceEpoch(int.parse(json));
  }

  @override
  String serialize(Serializer serializer, DateTime value) {
    return value.microsecondsSinceEpoch.toString();
  }
}

class DurationSerializer extends JsonSerializer<Duration> {
  @override
  Duration deserialize(Deserializer deserializer, Object? value) {
    final json = cast<String>(value);
    return Duration(microseconds: int.parse(json));
  }

  @override
  String serialize(Serializer serializer, Duration value) {
    return value.inMicroseconds.toString();
  }
}

class UriSerializer extends JsonSerializer<Uri> {
  @override
  Uri deserialize(Deserializer deserializer, Object? value) {
    final json = cast<String>(value);
    return Uri.parse(json);
  }

  @override
  String serialize(Serializer serializer, Uri value) {
    return value.toString();
  }
}

''';

String _render(String template, Map<String, String> values) {
  for (final key in values.keys) {
    final value = values[key]!;
    template = template.replaceAll('{{$key}}', value);
  }

  return template;
}
